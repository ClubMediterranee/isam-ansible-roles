- name: Get management root files
  isam:
    appliance: "{{ inventory_hostname }}"
    adminProxyProtocol: "{{ adminProxyProtocol | default(omit) }}"
    adminProxyHostname: "{{ adminProxyHostname | default(omit) }}"
    adminProxyPort: "{{ adminProxyPort | default(omit) }}"
    adminProxyApplianceShortName: "{{ adminProxyApplianceShortName | default(omit) }}"
    omitAdminProxy: "{{ omitAdminProxy | default(omit) }}"
    username:  "{{ username }}"
    password:  "{{ password }}"
    lmi_port:  "{{ port | default(omit) }}"
    log:       "{{ log_level | default(omit) }}"
    force:     "{{ force | default(omit) }}"
    action: ibmsecurity.isam.web.reverse_proxy.management_root.file.get_all
    isamapi:
      instance_id: "{{ item.0.inst_name }}"
  register: ret_obj

- name: Check local file
  stat: path="{{ inventory_dir }}/{{ item.1.directory }}{{ element.path | regex_replace(item.1.target,'') }}"
  when: (element.path | regex_search('^'+item.1.target)) == item.1.target
  with_items: "{{ ret_obj.data | flatten_management_root }}"
  loop_control:
    loop_var: element
    label: "{ inst_name=\"{{ item.0.inst_name }}\", path: \"{{ element.path }}\", type: \"{{ element.type }}\", name: \"{{ element.name }}\"}"
  register: locals

- name: Delete missing local files on the server 
  isam:
    appliance: "{{ inventory_hostname }}"
    adminProxyProtocol: "{{ adminProxyProtocol | default(omit) }}"
    adminProxyHostname: "{{ adminProxyHostname | default(omit) }}"
    adminProxyPort: "{{ adminProxyPort | default(omit) }}"
    adminProxyApplianceShortName: "{{ adminProxyApplianceShortName | default(omit) }}"
    omitAdminProxy: "{{ omitAdminProxy | default(omit) }}"
    username:  "{{ username }}"
    password:  "{{ password }}"
    lmi_port:  "{{ port | default(omit) }}"
    log:       "{{ log_level | default(omit) }}"
    force:     "{{ force | default(omit) }}"
    action: "ibmsecurity.isam.web.reverse_proxy.management_root.{{ local.element.type }}.delete"
    isamapi:
        instance_id: "{{ item.0.inst_name }}"
        id: "{{ local.element.path }}"
  when: local.stat is defined and not local.stat.exists and (local.element.path | dirname) not in (locals.results | json_query('[? !(stat.exists)].element.path') | difference([item.1.target]))
  with_items: "{{ locals.results }}"
  loop_control:
    loop_var: local
    label: "{ instance_id=\"{{ item.0.inst_name }}\", path=\"{{ local.element.path }}\"}"

- name: Check management root files
  isam:
    appliance: "{{ inventory_hostname }}"
    adminProxyProtocol: "{{ adminProxyProtocol | default(omit) }}"
    adminProxyHostname: "{{ adminProxyHostname | default(omit) }}"
    adminProxyPort: "{{ adminProxyPort | default(omit) }}"
    adminProxyApplianceShortName: "{{ adminProxyApplianceShortName | default(omit) }}"
    omitAdminProxy: "{{ omitAdminProxy | default(omit) }}"
    username:  "{{ username }}"
    password:  "{{ password }}"
    lmi_port:  "{{ port | default(omit) }}"
    log:       "{{ log_level | default(omit) }}"
    force:     "{{ force | default(omit) }}"
    action: ibmsecurity.isam.web.reverse_proxy.management_root.all.check
    isamapi:
      instance_id: "{{ item.0.inst_name }}"
      id: "{{ item.1.target.split('/')[0] }}"
      name: "{{ local.path if ((item.1.target.split('/')|length)<2) else (item.1.target | regex_replace(item.1.target.split('/')[0]+'/',''))+'/'+local.path }}"
      type: "{{ local.state }}"
  with_filetree: "{{ inventory_dir }}/{{ item.1.directory }}"
  loop_control:
    loop_var: local
    label: "{ instance_id=\"{{ item.0.inst_name }}\", type=\"{{ local.state }}\", id=\"{{ item.1.target.split('/')[0] }}\", name=\"{{ local.path if ((item.1.target.split('/')|length)<2) else (item.1.target | regex_replace(item.1.target.split('/')[0]+'/',''))+'/'+local.path }}\" }"
  register: ret_obj

- name: Temporary adding missing directories to management root [create_directory]
  set_fact: 
    updates: "{{ updates | default([]) + [{'action': 'create', 'type': create.data.type, 'target': create.data.top +'/'+ create.data.name }] }}"
  when: not create.data.id and create.data.type == 'directory'
  with_items: "{{ ret_obj.results }}"
  loop_control:
    label: "(instance_id=\"{{ item.0.inst_name }}\", action=\"create\", type=\"{{ create.data.type }}\", id=\"{{ create.data.top }}\", name=\"{{ create.data.name }}\")"
    loop_var: create

- name: Temporary adding all files to management root [upload]
  set_fact: 
    updates: "{{ updates | default([]) + [{'action': 'upload', 'type': upload.data.type, 'target': (upload.data.top +'/'+ upload.data.name), 'file': upload.local.root +'/'+ upload.local.path}] }}"
  when: upload.data.type != 'directory'
  with_items: "{{ ret_obj.results }}"
  loop_control:
    label: "(instance_id=\"{{ item.0.inst_name }}\", type=\"{{ upload.data.type }}\", target=\"{{ upload.data.top }}/{{ upload.data.name }}\", file=\"{{ upload.local.root }}/{{ upload.local.path }}\")"
    loop_var: upload  

- vars:
    filter_current: "[? inst_name == '{{ item.0.inst_name }}']"
    filter_other: "[? inst_name != '{{ item.0.inst_name }}']"
    filter_current_management_root: "[? inst_name == '{{ item.0.inst_name }}'].management_root[]"
  set_fact:
    instances: "[{{ hostvars[inventory_hostname].instances | json_query(filter_current) | json_query('[0]') | combine({'management_root':(instances | json_query(filter_current_management_root))+[upload]}) }}]+{{ hostvars[inventory_hostname].instances | json_query(filter_other) }}"
  with_items: "{{ updates }}"
  loop_control:
    loop_var: upload